load("~/GitHub/ProgrammingAssignment2/ProgrammingAssignment2.Rproj")
makeCacheMatrix <- function(matrix = matrix()) {
inverse <- NULL
set <- function(matrix_input) {
matrix <<- matrix_input
inverse <<- NULL
}
get <- function() {
matrix
}
getInverse <- function() {
inverse
}
cacheInverse <- function() {
if(!is.null(inverse)) {
message("Collecting cached Inverse")
return(inverse)
}
inverse <- solve(matrix)
cacheInverse(inverse)
inverse
}
list(set = set, get = get, getInverse = getInverse, cacheInverse = cacheInverse)
}
cacheSolve <- function(matrix) {
cachedInverse <- matrix$getInverse()
if(!is.null(cachedInverse)) {
message("Retrieving cached Inverse")
return(cachedInverse)
}
matrixData <- matrix$get()
inverse <- solve(matrixData)
matrix$setInverse(inverse)
inverse
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setInverse <- function(inv) i <<- inverse
getInverse <- function() i
list(set = set,
get = get,
getInverse = getInverse,
cacheInverse = cacheInverse
)
}
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if(!is.null(i)) {
message("Retrieving cached data")
return(i)
}
m <- x$get()
i <- solve(m, ...)
x$setInverse(i)
i
}
