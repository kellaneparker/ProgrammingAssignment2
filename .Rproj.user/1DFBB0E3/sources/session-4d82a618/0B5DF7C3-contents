###################################################
### Assignment: Caching the Inverse of a Matrix ###
###################################################
#_______________________________________________________________________________


#For this assignment, assume that the matrix supplied is always invertible.

#makeCacheMatrix function creates a "special" inverse to cache
makeCacheMatrix <- function(x = matrix()) {
  #initializes the inverse to NULL
  i <- NULL
  
  #"set" function sets the value of the matrix
  set <- function(y) {
    x <<- y     #assigns the input matrix to "x"
    i <<- NULL  # resets cached inverse to NULL
  }
  
  #"get" function takes the value of the matrix
  get <- function() x    #returns current matrix "x"
  #"setInverse" sets the cached inverse
  setInverse <- function(inv) i <<- inverse  #sets the cached inverse to "i"
  #"getInverse" takes the cached inverse
  getInverse <- function() i   #collects the cached inverse "i"
  #returns a list of functions
  list(set = set,  #sets the matrix
       get = get,  #gets the matrix
       getInverse = getInverse,     #sets the cached inverse
       cacheInverse = cacheInverse  #gets the cached inverse
  )
}


#Calculates the inverse of a "special" matrix created with "cacheSolve"
cacheSolve <- function(x, ...) {
  i <- x$getInverse()   #retrieves cached inverse
  if(!is.null(i)) { 
    message("Retrieving cached data")  #message that's displayed if cached data is collected
    return(i)   #returns cached inverse
  }
  m <- x$get()     #retrieve matrix
  i <- solve(m, ...) #calculates inverse of matrix
  x$setInverse(i)    #caches the inverse using "setInverse" function
  i    #returns inverse
}
