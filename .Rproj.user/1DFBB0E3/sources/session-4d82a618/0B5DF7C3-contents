###################################################
### Assignment: Caching the Inverse of a Matrix ###
###################################################
#_______________________________________________________________________________
#Matrix inversion is usually a costly computation and there may be some benefit
#to caching the inverse of a matrix rather than compute it repeatedly (there are
#also alternatives to matrix inversion that we will not discuss here). Your 
#assignment is to write a pair of functions that cache the inverse of a matrix. 

#Write the following functions:
# 1. "makeCacheMatrix": This function creates a special "matrix" object that can
#     cache its inverse. 
# 2. "cacheSolve": This function computes the inverse of the special "matrix" 
#     returned by "makeCacheMatrix" above. If the inverse has already been
#     calculated (and the matrix has not changed), then "cacheSolve" should 
#     retrieve the inverse from the cache.
#Computing the inverse of a square matrix can be done with the "solve" function
#in R. For example, if "x" is a square invertible matrix, then "solve(x)" should
#retrieve the inverse from the cache. 

#For this assignment, assume that the matrix supplied is always invertible.

#makeCacheMatrix function

makeCacheMatrix <- function(x = matrix()) {
  i <- NULL
  
  set <- function(y) {
    x <<- y
    i <<- NULL
  }
  
  get <- function() x
  setInverse <- function(inv) i <<- inverse
  getInverse <- function() i 
  list(set = set, 
       get = get, 
       getInverse = getInverse, 
       cacheInverse = cacheInverse
  )
}


#Calculate the inverse of a "special" matrix created with "cacheSolve"

cacheSolve <- function(x, ...) {
  i <- x$getInverse()
  if(!is.null(i)) {
    message("Retrieving cached data")
    return(i)
  }
  m <- x$get()
  i <- solve(m, ...)
  x$setInverse(i)
  i
}
